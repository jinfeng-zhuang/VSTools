diff --git a/app/Src/thal_video_api.c b/app/Src/thal_video_api.c
index 635610a..31410f1 100755
--- a/app/Src/thal_video_api.c
+++ b/app/Src/thal_video_api.c
@@ -43,6 +43,7 @@
 #include "thal_video_api.h"
 #include "trid_timer_api.h"
 #include "app_video_debug.h"
+//#include "trid_video_internal.h"
 
 #if defined(ENABLE_DEMUX) && (defined(SX5) || defined(UXL))
 #include "thal_demux_slave_api.h"
@@ -2642,6 +2643,8 @@ RETURN_TYPE SX_AVCore_Video_GetVideoShareInfoAddr(trid_uint32 ChanType, trid_uin
 
 #define SET_TIMER_SPEED (GET_VIDEO_DEBUG_INFO_BASE + 21)
 
+#define GET_VIDEO_DECODER_CONTEXT   (GET_VIDEO_DEBUG_INFO_BASE + 22)
+
 #define FW_DEBUG_MEM_SIZE 0x1000
 #define FW_DEBUGBUF_HEADER_OFFSET 0x80
 
@@ -2845,10 +2848,19 @@ trid_uint32 SX_AVCore_Video_GetDbgInfo(const trid_uint32 cmd) {
             }
             break;
 
+        case GET_VIDEO_DECODER_CONTEXT:
+            addr = K01UVirt2PA((void*)VideoDec_GetDecoderCtx(chan_id));
+            unsigned int *addr_ex = (unsigned int *)VideoDec_GetDecoderCtx(chan_id);
+
+            TRID_ERROR("GET_VIDEO_DECODER_CONTEXT: %#x\n", VideoDec_GetDecoderCtx(chan_id));
+            TRID_ERROR("%x %x %x %x\n", addr_ex[0], addr_ex[1], addr_ex[2], addr_ex[3]);
+            
+            break;
+
         default:
             break;
     }
-    TRID_LOG("cmd=%#x,chan_id=%#xaddr=%#x\n", cmd, chan_id, addr);
+    TRID_ERROR("cmd=%#x, chan_id=%#x, addr=%#x\n", cmd, chan_id, addr);
     return addr;
 }
 
diff --git a/build/scripts/AddVer.sh b/build/scripts/AddVer.sh
index d83266b..b0b16b4 100755
--- a/build/scripts/AddVer.sh
+++ b/build/scripts/AddVer.sh
@@ -1,7 +1,7 @@
 #!/bin/bash
 
 StartAddr=$(grep __executable_start ../Install/Core/sde.ld |  awk -F " " '{print $9}'| sed 's\;\\')
-ChipId="SX8_SDK"
+ChipId="SX8B_SDK"
 
 LocalChange=$(git status --ignored -s $GitPath | grep "^ M")
 InfoName=/tmp/dcp_info_$Time.txt
diff --git a/demux/Src/trid_demux_slave_api.c b/demux/Src/trid_demux_slave_api.c
old mode 100644
new mode 100755
index 9b4ec69..750f195
--- a/demux/Src/trid_demux_slave_api.c
+++ b/demux/Src/trid_demux_slave_api.c
@@ -848,6 +848,46 @@ RETURN_TYPE Thal_Demux_Slave_ESBuf_GetWriteWrapCount(tridDemuxHandle_t demuxhand
     return (SYS_NOERROR);
 }
 
+RETURN_TYPE Thal_Demux_Slave_ESBuf_GetStartWrapCount(tridDemuxHandle_t demuxhandle, trid_uint32* pwritewrapcount) {
+    RETURN_TYPE TridRetStatus = SYS_NOERROR;
+#if defined(PRO_UXL) || defined(SX5)
+    return SYS_NOT_SUPPORT;
+#else
+    volatile DMX_ES_BUF_DESCRIPTOR* pESBufDesc = NULL;
+    u_int32 uRegData = 0;
+
+    if ((TridRetStatus = dmx_internal_es_buf_get_desc()) != SYS_NOERROR) return (SYS_FAILED);
+
+    if (gpEsBufDescr == NULL || gEsBufDescSize == 0 || demuxhandle > AV_BUFFER_DESCRIPTOR_MAX_INDEX) return (SYS_FAILED);
+
+    pESBufDesc = (DMX_ES_BUF_DESCRIPTOR*)((u_int32)gpEsBufDescr + demuxhandle * gEsBufDescSize);
+    DemuxReadReg(DEMUX_REGISTER_SIZE, (HW_DWORD) & (pESBufDesc->uBufStartPtr), &uRegData);
+    *pwritewrapcount = uRegData;
+//*pwritewrapcount = TRID_GET_VAL(&uRegData,TSP_ES_BUFF_DESC_WRAP_CNT_MASK);
+#endif
+    return (SYS_NOERROR);
+}
+
+RETURN_TYPE Thal_Demux_Slave_ESBuf_GetEndWrapCount(tridDemuxHandle_t demuxhandle, trid_uint32* pwritewrapcount) {
+    RETURN_TYPE TridRetStatus = SYS_NOERROR;
+#if defined(PRO_UXL) || defined(SX5)
+    return SYS_NOT_SUPPORT;
+#else
+    volatile DMX_ES_BUF_DESCRIPTOR* pESBufDesc = NULL;
+    u_int32 uRegData = 0;
+
+    if ((TridRetStatus = dmx_internal_es_buf_get_desc()) != SYS_NOERROR) return (SYS_FAILED);
+
+    if (gpEsBufDescr == NULL || gEsBufDescSize == 0 || demuxhandle > AV_BUFFER_DESCRIPTOR_MAX_INDEX) return (SYS_FAILED);
+
+    pESBufDesc = (DMX_ES_BUF_DESCRIPTOR*)((u_int32)gpEsBufDescr + demuxhandle * gEsBufDescSize);
+    DemuxReadReg(DEMUX_REGISTER_SIZE, (HW_DWORD) & (pESBufDesc->uBufEndPtr), &uRegData);
+    *pwritewrapcount = uRegData;
+//*pwritewrapcount = TRID_GET_VAL(&uRegData,TSP_ES_BUFF_DESC_WRAP_CNT_MASK);
+#endif
+    return (SYS_NOERROR);
+}
+
 /*******************************************************************************
 * Function	 : Thal_Demux_Slave_ESBuf_GetTotal
 * Description:
diff --git a/include/sx_common.h b/include/sx_common.h
index 87b1f70..df63af8 100644
--- a/include/sx_common.h
+++ b/include/sx_common.h
@@ -308,7 +308,7 @@ extern unsigned int DSP_ReadReg(unsigned int addr);
 // to load AV Decoder bin file
 //#if defined(FUSION) || defined(SX5) || defined(UXL) || defined(SX6) || defined(SX7) || defined(SX8)
 #if 1
-#define AV_DECODER_BASE_ADDR (0xD400000)
+#define AV_DECODER_BASE_ADDR				(0xD400000)
 #define AV_DECODER_SYS_SIZE (0xC00000)
 #define AV_DECODER_XMLBUF_ADDR (AV_DECODER_BASE_ADDR + 0x1000)
 #endif
diff --git a/video/Src/decoder/input/trid_video_core_mcx.c b/video/Src/decoder/input/trid_video_core_mcx.c
old mode 100644
new mode 100755
index 33d88b5..5f61bb6
--- a/video/Src/decoder/input/trid_video_core_mcx.c
+++ b/video/Src/decoder/input/trid_video_core_mcx.c
@@ -763,6 +763,10 @@ RETURN_TYPE Demux_GetWrapCount(tridDemuxHandle_t demuxhandle, tridBufPointerType
         ret = Thal_Demux_Slave_ESBuf_GetWriteWrapCount(demuxhandle, pbufpointer);
     else if (bufpointertype == DEMUX_DESC_PTR_TYPE_RD)
         ret = Thal_Demux_Slave_ESBuf_GetReadWrapCount(demuxhandle, pbufpointer);
+    else if (bufpointertype == DEMUX_DESC_PTR_TYPE_START)
+        ret = Thal_Demux_Slave_ESBuf_GetStartWrapCount(demuxhandle, pbufpointer);
+    else if (bufpointertype == DEMUX_DESC_PTR_TYPE_END)
+        ret = Thal_Demux_Slave_ESBuf_GetEndWrapCount(demuxhandle, pbufpointer);
 
     return ret;
 }
@@ -778,6 +782,10 @@ static RETURN_TYPE Fusion_MCX_GetWrapCount(const TridMcxHandle_t hdl, const McxP
             DmxPtrType = DEMUX_DESC_PTR_TYPE_WR;
         else if (MCX_PTR_TYPE_RD == type)
             DmxPtrType = DEMUX_DESC_PTR_TYPE_RD;
+        else if (MCX_PTR_TYPE_START == type)
+            DmxPtrType = DEMUX_DESC_PTR_TYPE_START;
+        else if (MCX_PTR_TYPE_END == type)
+            DmxPtrType = DEMUX_DESC_PTR_TYPE_END;
         ret = Demux_GetWrapCount(hdl, DmxPtrType, pulPtrVal);
     } else {
         ret = SYS_NOERROR;
diff --git a/video/Src/decoder/mpegdisp/trid_video_mpegdisp_int.c b/video/Src/decoder/mpegdisp/trid_video_mpegdisp_int.c
old mode 100644
new mode 100755
index 368d4a1..7ab6b8c
--- a/video/Src/decoder/mpegdisp/trid_video_mpegdisp_int.c
+++ b/video/Src/decoder/mpegdisp/trid_video_mpegdisp_int.c
@@ -997,7 +997,30 @@ static void MpegDispInt(ChannelType_e ChanType) {
 
     if (trid_true == ptMpegDispObj->bEDREnable) currentRdyQ = &ptMpegDispObj->EDRFrmQ;
 
-    VIDEO_LOG("edr %d, frmq %p, fq %d\n", ptMpegDispObj->bEDREnable, currentRdyQ, FrameqQueryFull(*currentRdyQ));
+#if 1
+    trid_uint32 ulRdPtr = 0, ulWrPtr = 0, ulStart = 0, ulEnd = 0, es_data_size = 0;
+
+    Video_Core_MCX_GetWrapCount(pVDecCtx->tMCXDesc.ulMcxHdl, MCX_PTR_TYPE_RD, &ulRdPtr);
+    Video_Core_MCX_GetWrapCount(pVDecCtx->tMCXDesc.ulMcxHdl, MCX_PTR_TYPE_WR, &ulWrPtr);
+    Video_Core_MCX_GetWrapCount(pVDecCtx->tMCXDesc.ulMcxHdl, MCX_PTR_TYPE_START, &ulStart);
+    Video_Core_MCX_GetWrapCount(pVDecCtx->tMCXDesc.ulMcxHdl, MCX_PTR_TYPE_END, &ulEnd);
+
+    ulRdPtr = ulRdPtr & (~0xC0000000);
+    ulWrPtr = ulWrPtr & (~0xC0000000);
+
+    if (ulRdPtr <= ulWrPtr)
+        es_data_size = (ulWrPtr - ulRdPtr) >> 20;
+    else
+        es_data_size = ((ulWrPtr - ulStart) + (ulEnd - ulRdPtr)) >> 20;
+
+    VIDEO_ERROR("es data size: %d MB\n", es_data_size);
+
+    if (es_data_size >= 12) {
+        VIDEO_ERROR("MCX[2]: %x %x, %x %x\n", ulStart, ulEnd, ulRdPtr, ulWrPtr);
+    }
+#endif
+
+    VIDEO_ERROR("edr %d, frmq %p, fq %d\n", ptMpegDispObj->bEDREnable, currentRdyQ, FrameqQueryFull(*currentRdyQ));
 
     Video_Core_GetCoreType(ptMpegDispObj->ulHandle, &eCoreType);
 
